{
  "name": "assemble-manifest",
  "description": "Generates JSON and/or YAML manifest files from given source files or directories or source files.",
  "version": "0.1.3",
  "homepage": "https://github.com/assemble/assemble-manifest",
  "author": {
    "name": "Assemble",
    "url": "http://github.com/assemble/assemble/"
  },
  "contributors": [
    {
      "name": "Brian Woodward",
      "url": "https://github.com/doowb"
    },
    {
      "name": "Jon Schlinkert",
      "url": "https://github.com/jonschlinkert"
    }
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/assemble/assemble-manifest.git"
  },
  "bugs": {
    "url": "https://github.com/assemble/assemble-manifest/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/assemble/assemble-manifest/blob/master/LICENSE-MIT"
    }
  ],
  "main": "Gruntfile.js",
  "engines": {
    "node": ">= 0.8.0"
  },
  "scripts": {
    "test": "grunt test"
  },
  "dependencies": {
    "graceful-fs": "~1.2.0",
    "grunt": "~0.4.1",
    "grunt-contrib-clean": "~0.4.1",
    "grunt-contrib-jshint": "~0.4.3",
    "grunt-contrib-nodeunit": "~0.1.2",
    "js-yaml": "~2.0.4",
    "lodash": "~1.2.0",
    "minimatch": "~0.2.12",
    "to": "~0.2.9"
  },
  "keywords": [
    "gruntplugin",
    "package",
    "package manifest",
    "directories files",
    "json",
    "yaml",
    "manifest"
  ],
  "readme": "# [assemble-manifest v0.1.3](http://github.com/assemble/assemble-manifest) [![Build Status](https://travis-ci.org/assemble/assemble-manifest.png)](https://travis-ci.org/assemble/assemble-manifest)\n\n> Generates JSON and/or YAML manifest files from given source files or directories or source files.\n\nThis project is more of a proof of concept or sandbox for generating:\n\n* Component manifests\n* component.json\n* package.json\n* [jQuery Plugin Package Manifest](http://plugins.jquery.com/docs/package-manifest/)\n* JSON or YAML formatted lists of files of certain types in given directories, grouped into \"collections\".\n* Or just use it to sync the metadata in your root `.json` files: `package.json`, `component.json`, `*.jquery.json`, `_config.yml` etc.\n\nSee some of the [example manifests](https://github.com/assemble/assemble-manifest/tree/master/test/actual) generated with this task.\n\n\n## Getting Started\nThis plugin requires Grunt `~0.4.0`\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install assemble-manifest --save-dev\n```\n\nOne the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('assemble-manifest');\n```\n\n## The \"manifest\" task\n\n### Overview\nIn your project's Gruntfile, add a section named `manifest` to the data object passed into `grunt.initConfig()`.\n\n```js\ngrunt.initConfig({\n  manifest: {\n    options: {\n      // Task-specific options go here.\n    },\n    your_target: {\n      // Target-specific file lists and/or options go here.\n    }\n  }\n})\n```\n\n\n### Options\n_Documentation forthcoming_\n\n#### format\nType: `String`\nDefault: `json`\n\nOption to specify output format for dest files. Case insensitive, and may be either YAML or JSON format. Any of the following will work:\n\n* `'yml'`, `'yaml'`, `'YML'`, `'YAML'`\n* `'json'`, `'JSON'` (although these are uncessary since the task defaults to json)\n\n\n#### sorted\nType: `Boolean`\nDefault: `false`\n\nSorts ouput objects and properties in alphabetical order.\n\n\n#### indent\nType: `Number`\nDefault: `2`\n\nNumber of spaces to indent the output. Currently only works for `.json` files, not `.yml`.\n\n\n#### debug\nType: `Boolean`\nDefault: `false`\n\nWhen set to `true`, the output will include all omitted properties for inspection.\n\n\n## Collections\nType: `Arrays|Objects`\nDefault: `documents|fonts|images|javascripts|markdown|styles|templates`\n\n> Generate arrays of files with specific extensions from given source directories. \n\nCurrently limited to file types defined in the code. We realize this part of the task is somewhat hard-coded for our own usage, so the plan is to allow collections and extensions to be user-defined, through the task and target options. \n\nBy default, currently the task will build the following types of collections, and with the specified extensions for each collection:\n\n#### documents\n`.md` | `.txt` | `.doc` | `.docx` | `.pdf`\n\n#### fonts\n`.eot` | `.svg` | `.otf` | `.ttf` | `.woff` \n\n#### images\n`.ico` | `.png` | `.gif` | `.jpg` \n\n#### javascripts\n`.js` | `.coffee`\n\n#### markdown\n`.md` | `.markd` | `.markdown`\n\n#### styles\n`.css` | `.less` | `.stylus` | `.sass` | `.scss` \n\n#### templates\n`.hbs` | `.hbr` | `.handlebars` | `.html` | `.htm` | `.mustache` | `.tmpl` \n\n\nTo build a specific collection, just add the extension pattern(s) for the `src` files you want to add to your dest file(s). For pre-defined collections, you don't need to do anything to explicity add the collection itself, the task takes care of that for you. For example:\n\n``` js\nimages: {\n  options: {\n    name: 'Image Manifest'\n  },\n  files: {\n    'dest/images.json': ['assets/img/**/*.{jpg,png,gif}'],\n  }\n}\n```\nWill yield an `images` collection that includes an array of files with the extensions specified in the `files` object:\n\nOutput: `images.json`\n\n``` json\n{\n  \"images\": [\n    \"assets/img/one.jpg\",\n    \"assets/img/two.jpg\",\n    \"assets/img/three.jpg\",\n    \"assets/img/icons/icon-a.jpg\",\n    \"assets/img/icons/icon-b.jpg\",\n    ...\n  ]\n}\n```\n\n### Usage Examples\nSee some of the [example manifests](https://github.com/assemble/assemble-manifest/tree/master/test/actual) generated with this task.\n\nLet's say the goal is to build a `component.json` from a `package.json`. We could: \n\n * Do a one-to-one transfer of objects and properties\n * Override any objects or properties in the options by simply adding the new value to the options. \n * Remove any objects or properties in the options by making the value `undefined` (this is a quick fix, will revisit but it works for now.)\n * Define new objects and properties in the options block.\n \n``` js\nmanifest: {\n  options: {\n    metadata: 'metadata.json', // optional source of metatdata\n    name: 'assemble-manifest'\n    version: '0.1.0'           \n    description: 'Generates JSON and/or YAML manifest files from given source files or directories or source files.'\n  },\n  // build component.json from package.json\n  package: {\n    files: {\n      'package.json': []\n    }\n  },\n  component: {\n    files: {\n      'component.json': []\n    }\n  }\n}\n```\n\n\n#### Default Options\n\n``` js\nmanifest: {\n  options: {\n    collections: true,\n    debug: false,\n    exclude: [],\n    format: 'json',\n    include: [],\n    indent: 2,\n    manifestrc: [],\n    metadata: [],\n    sorted: false\n  },\n  // build component.json from package.json\n  component: {\n    files: {\n      'component.json': ['package.json']\n    }\n  }\n}\n```\n\n#### Custom Options\n_On the way..._\n\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [Grunt](http://gruntjs.com/).\n\n\n## License\n[MIT License](LICENSE-MIT)\n\n## Release History\n_(Nothing yet)_\n",
  "readmeFilename": "README.md",
  "_id": "assemble-manifest@0.1.3",
  "dist": {
    "shasum": "c0ea92c034a53c55d9c46dcc15992ca4a3fc8784"
  },
  "_from": "assemble-manifest@",
  "_resolved": "https://registry.npmjs.org/assemble-manifest/-/assemble-manifest-0.1.3.tgz"
}
