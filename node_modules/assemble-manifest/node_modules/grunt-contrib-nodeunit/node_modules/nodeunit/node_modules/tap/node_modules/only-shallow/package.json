{
  "name": "only-shallow",
  "version": "1.2.0",
  "description": "like `deeper` and `deepest`, but less strict, and with 90s flavor",
  "main": "index.js",
  "scripts": {
    "test": "standard && tap test/*.js --coverage"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/othiym23/only-shallow.git"
  },
  "keywords": [
    "deeper",
    "deepest",
    "deepEqual",
    "tap",
    "mbv",
    "shoegazer",
    "portlandia"
  ],
  "author": {
    "name": "Forrest L Norvell",
    "email": "ogd@aoaioxxysz.net"
  },
  "license": "ISC",
  "bugs": {
    "url": "https://github.com/othiym23/only-shallow/issues"
  },
  "homepage": "https://github.com/othiym23/only-shallow#readme",
  "devDependencies": {
    "buffertools": "^2.1.3",
    "standard": "^5.1.1",
    "tap": "^1.3.2"
  },
  "readme": "[![only-shallow on npm](https://img.shields.io/npm/v/only-shallow.svg?style=flat)](http://npm.im/only-shallow)\n[![Build Status](https://travis-ci.org/othiym23/only-shallow.svg?branch=master)](https://travis-ci.org/othiym23/only-shallow)\n[![Coverage Status](https://coveralls.io/repos/othiym23/only-shallow/badge.svg?branch=master&service=github)](https://coveralls.io/github/othiym23/only-shallow?branch=master)\n[![\"standard\" style](https://img.shields.io/badge/code%20style-standard-brightgreen.svg?style=flat)](https://github.com/feross/standard)\n\n# only-shallow\n\nIf [`deeper`](http://npm.im/deeper) and [`deepest`](http://npm.im/deepest) are\n`assert.deepEqual()`'s strict East Coast siblings with engineering backgrounds,\n`only-shallow` is their laid-back California cousin.  `only-shallow` is a\nlibrary for structurally comparing JavaScript objects. It supports recursive /\ncyclical data structures, is written to avoid try / catch / throw (for speed),\nand has no dependencies. It's not particularly strict about matching types.\nIt's more of a duck squeezer.\n\nIt has some optimizations but stresses correctness over raw speed. Unlike\n`deepest`, it has no native dependencies, so you can use it, like, wherever.\n\nIf you install [Ben Noordhuis](http://github.com/bnoordhuis)'s\n[buffertools](https://github.com/bnoordhuis/node-buffertools) into a project\nusing `only-shallow`, it will use that to speed up comparison of Buffers.\n\nThe core algorithm is based on those used by Node's assertion library and the\nimplementation of cycle detection in\n[isEqual](http://underscorejs.org/#isEqual) in\n[Underscore.js](http://underscorejs.org/).\n\nI like to think the documentation is pretty OK.\n\n`only-shallow` has this name because [I'm\nold](https://www.youtube.com/watch?v=oiomcuNlVjk).\n\n## installation\n\n```\nnpm install only-shallow\n```\n\n## usage\n\n```javascript\nvar deepEqual = require('only-shallow')\n\nif (!deepEqual(obj1, obj2)) console.log(\"yay! diversity!\");\n```\n\n## details\n\nCopied from the source, here are the details of `only-shallow`'s algorithm:\n\n1. Use loose equality (`==`) only for value types (non-objects). This is the\n   biggest difference between `only-shallow` and `deeper` / `deepest`.\n   `only-shallow` cares more about shape and contents than type. This step will\n   also catch functions, with the useful (default) property that only\n   references to the same function are considered equal. 'Ware the halting\n   problem!\n2. `null` *is* an object – a singleton value object, in fact – so if\n   either is `null`, return a == b. For the purposes of `only-shallow`,\n   loose testing of emptiness makes sense.\n3. Since the only way to make it this far is for `a` or `b` to be an object, if\n   `a` or `b` is *not* an object, they're clearly not the same.\n4. It's much faster to compare dates by numeric value (`.getTime()`) than by\n   lexical value.\n5. Compare RegExps by their components, not the objects themselves.\n6. The parts of an arguments list most people care about are the arguments\n   themselves, not the callee, which you shouldn't be looking at anyway.\n7. Objects are more complex:\n   1. Return `true` if `a` and `b` both have no properties.\n   2. Ensure that `a` and `b` have the same number of own properties (which is\n      what `Object.keys()` returns).\n   3. Ensure that cyclical references don't blow up the stack.\n   4. Ensure that all the key names match (faster).\n   5. Ensure that all of the associated values match, recursively (slower).\n\n## license\n\nISC. Go nuts.\n",
  "readmeFilename": "README.md",
  "_id": "only-shallow@1.2.0",
  "dist": {
    "shasum": "71eb43ecfe4cbb3d373f5c64377e9e0b75bc7b7e"
  },
  "_from": "only-shallow@^1.0.2",
  "_resolved": "https://registry.npmjs.org/only-shallow/-/only-shallow-1.2.0.tgz"
}
