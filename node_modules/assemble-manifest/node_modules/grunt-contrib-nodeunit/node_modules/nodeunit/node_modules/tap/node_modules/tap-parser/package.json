{
  "name": "tap-parser",
  "version": "1.2.2",
  "description": "parse the test anything protocol",
  "main": "index.js",
  "bin": {
    "tap-parser": "bin/cmd.js"
  },
  "dependencies": {
    "events-to-array": "^1.0.1",
    "inherits": "~2.0.1",
    "js-yaml": "^3.2.7",
    "readable-stream": "^2"
  },
  "devDependencies": {
    "glob": "^5.0.2",
    "tap": "^1.2.0",
    "tape": "^3.5.0"
  },
  "scripts": {
    "test": "tap test/*.js"
  },
  "testling": {
    "files": "test/*.js",
    "browsers": [
      "ie/6..latest",
      "chrome/10",
      "chrome/latest",
      "firefox/3.5",
      "firefox/latest",
      "opera/latest",
      "safari/latest"
    ]
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/substack/tap-parser.git"
  },
  "homepage": "https://github.com/substack/tap-parser",
  "keywords": [
    "tap",
    "test",
    "parser"
  ],
  "author": {
    "name": "James Halliday",
    "email": "mail@substack.net",
    "url": "http://substack.net"
  },
  "license": "MIT",
  "optionalDependencies": {
    "readable-stream": "^2"
  },
  "files": [
    "index.js",
    "bin/cmd.js",
    "bin/usage.txt"
  ],
  "readme": "# tap-parser\n\nparse the [test anything protocol](http://testanything.org/)\n\n[![build status](https://secure.travis-ci.org/substack/tap-parser.png)](http://travis-ci.org/substack/tap-parser)\n\n[![browser support](http://ci.testling.com/substack/tap-parser.png)](http://ci.testling.com/substack/tap-parser)\n\n# example\n\n``` js\nvar parser = require('tap-parser');\nvar p = parser(function (results) {\n    console.dir(results);\n});\n\nprocess.stdin.pipe(p);\n```\n\ngiven some [TAP](http://testanything.org/)-formatted input:\n\n```\n$ node test.js\nTAP version 13\n# beep\nok 1 should be equal\nok 2 should be equivalent\n# boop\nok 3 should be equal\nok 4 (unnamed assert)\n\n1..4\n# tests 4\n# pass  4\n\n# ok\n```\n\nparse the output:\n\n```\n$ node test.js | node parse.js\n{ ok: true, count: 4, pass: 4, plan: { start: 1, end: 4 } }\n```\n\n# usage\n\nThis package also has a `tap-parser` command.\n\n```\nUsage:\n  tap-parser [-j [<indent>] | --json[=indent]]\n\nParses TAP data from stdin, and outputs an object representing\nthe data found in the TAP stream to stdout.\n\nIf there are any failures in the TAP stream, then exits with a\nnon-zero status code.\n\nData is output by default using node's `util.format()` method, but\nJSON can be specified using the `-j` or `--json` flag with a number\nof spaces to use as the indent (default=2).\n```\n\n# methods\n\n``` js\nvar parser = require('tap-parser')\n```\n\n## var p = parser(cb)\n\nReturn a writable stream `p` that emits parse events.\n\nIf `cb` is given it will listen for the `'complete'` event.\n\n# events\n\n## p.on('complete', function (results) {})\n\nThe `results` object contains a summary of the number of tests\nskipped, failed, passed, etc., as well as a boolean `ok` member which\nis true if and only if the planned test were all found, and either\n\"ok\" or marked as \"TODO\".\n\n## p.on('assert', function (assert) {})\n\nEvery `/^(not )?ok\\b/` line will emit an `'assert'` event.\n\nEvery `assert` object has these keys:\n\n* `assert.ok` - true if the assertion succeeded, false if failed\n* `assert.id` - the assertion number\n* `assert.name` - optional short description of the assertion\n\nand may also have\n\n* `assert.todo` - optional description of why the assertion failure is\n  not a problem.  (Boolean `true` if no explaination provided)\n* `assert.skip` - optional description of why this assertion was\n  skipped (boolean `true` if no explanation provided)\n* `assert.diag` - a diagnostic object with additional information\n  about the test point.\n\n## p.on('comment', function (comment) {})\n\nEvery `/^# (.+)/` line will emit the string contents of `comment`.\n\n## p.on('plan', function (plan) {})\n\nEvery `/^\\d+\\.\\.\\d+/` line emits a `'plan'` event for the test numbers\n`plan.start` through `plan.end`, inclusive.\n\nIf the test is [completely\nskipped](http://podwiki.hexten.net/TAP/TAP.html?page=TAP#Skippingeverything)\nthe result will look like\n\n```\n{ ok: true,\n  count: 0,\n  pass: 0,\n  plan:\n   { start: 1,\n     end: 0,\n     skipAll: true,\n     skipReason: 'This code has no seat belt' } }\n```\n\n## p.on('version', function (version) {})\n\nA `/^TAP version (\\d+)/` line emits a `'version'` event with a version\nnumber or string.\n\n## p.on('bailout', function (reason) {})\n\nA `bail out!` line will cause the parser to completely stop doing\nanything.  Child parser bailouts will bail out their parents as well.\n\n## p.on('child', function (childParser) {})\n\nIf a child test set is embedded in the stream like this:\n\n```\nTAP Version 13\n1..2\n# nesting\n    1..2\n    ok 1 - true is ok\n    ok 2 - doag is also okay\nok 1 - nesting\nok 2 - second\n```\n\nthen the child stream will be parsed and events will be raised on the\n`childParser` object.\n\nSince TAP streams with child tests *should* follow child test sets\nwith a pass or fail assert based on the child test's results, failing\nto handle child tests should always result in the same end result.\nHowever, additional information from those child tests will obviously\nbe lost.\n\n## p.on('extra', function (extra) {})\n\nAll other lines will trigger an `'extra'` event with the line text.\n\n# install\n\nWith [npm](https://npmjs.org) do:\n\n```\nnpm install tap-parser\n```\n\nYou can use [browserify](http://browserify.org) to `require('tap-parser')` in\nthe browser.\n\n# license\n\nMIT\n",
  "readmeFilename": "readme.markdown",
  "bugs": {
    "url": "https://github.com/substack/tap-parser/issues"
  },
  "_id": "tap-parser@1.2.2",
  "dist": {
    "shasum": "9d72888d2bd5f8c41940f46147cbf17c1aefe19a"
  },
  "_from": "tap-parser@^1.2.2",
  "_resolved": "https://registry.npmjs.org/tap-parser/-/tap-parser-1.2.2.tgz"
}
